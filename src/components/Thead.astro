---
interface Props {
  display: string;
}
interface FilterObj {
  orderColumn: string;
  isEnum: boolean;
}
const { display } = Astro.props;
const filter: FilterObj = {
  orderColumn: "",
  isEnum: display === "Dernière MAJ",
};
switch (display) {
  case "Nom":
    filter.orderColumn = "last_name";
    break;
  case "Prénom":
    filter.orderColumn = "first_name";
    break;

  default:
    break;
}
---

<div x-data="dropdown">
  <li>
    {display}
  </li>
  {
    display !== "CV" && display !== "Contacter" && (
      <svg
        x-bind="trigger"
        xmlns="http://www.w3.org/2000/svg"
        height="1.1em"
        viewBox="0 0 320 512"
      >
        <path d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z" />
      </svg>
    )
  }
  {
    !filter.isEnum && (
      <div x-bind="dialog">
        <form>
          <input type="text" hidden name="orderDirection" value="asc" />
          <input
            type="text"
            hidden
            name="orderColumn"
            value={filter.orderColumn}
          />
          <button
            x-on:click="open = false"
            class="orderAsc"
            hx-post="/ordering"
            hx-trigger="click"
            hx-target="#tbody"
            hx-select="#tbody"
            hx-indicator="#load"
            type="button"
          >
            Trier de A - Z
          </button>
        </form>
        <form>
          <input type="text" hidden name="orderDirection" value="desc" />
          <input
            type="text"
            hidden
            name="orderColumn"
            value={filter.orderColumn}
          />
          <button
            x-on:click="open = false"
            class="orderDesc"
            hx-post="/ordering"
            hx-trigger="click"
            hx-target="#tbody"
            hx-select="#tbody"
            hx-indicator="#load"
            type="button"
          >
            Trier de Z - A
          </button>
        </form>
      </div>
    )
  }
  {
    filter.isEnum && (
      <div x-bind="dialog">
        <button type="button">A jour -> Expiré</button>
        <button type="button"> Expiré -> A jour</button>
      </div>
    )
  }
</div>

<style>
  div {
    display: flex;
    align-items: center;
    position: relative;
  }

  form {
    padding: 0;
    margin: 0;
  }

  hr {
    width: 100%;
  }
  div[x-bind] {
    position: absolute;
    background-color: var(--gray-800);
    top: 2.1rem;
    right: 0;
    left: 0;
    border: 1px solid var(--gray-500);
    border-radius: 3px;
    flex-direction: column;
    z-index: 30;
  }
  button {
    background: none;
    width: 100%;
    border: none;
    color: var(--gray-200);
    padding: 0.5rem 1rem;
    cursor: pointer;
  }

  form:hover {
    background-color: var(--gray-700);
    width: 100%;
  }
  li {
    padding: 0.75rem;
    padding-left: 1rem;
    position: relative;
  }
  svg {
    fill: aliceblue;
    cursor: pointer;
  }
</style>
<script>
  const orderAscBtns = document.querySelectorAll(".orderAsc");
  const orderDescBtns = document.querySelectorAll(".orderDesc");

  orderAscBtns.forEach((orderAsc) =>
    orderAsc.addEventListener("click", (e) => makeIt(e))
  );

  orderDescBtns.forEach((orderDesc) => {
    orderDesc.addEventListener("click", (e) => makeIt(e));
  });

  function makeIt(e: Event) {
    const btn = e.target;
    if (!(btn instanceof HTMLButtonElement)) {
      console.error(btn, " not a button element");
      return;
    }
    const sibling = btn.previousElementSibling;
    if (!(sibling instanceof HTMLInputElement)) {
      console.error(sibling, " not an input element");
      return;
    }
    const url = new URL(window.location.href);
    url.searchParams.set("orderDirection", "asc");
    url.searchParams.set("orderColumn", sibling.value);
    window.history.pushState(null, "", url);
  }
</script>
